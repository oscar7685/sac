package naval.dominio;
// Generated 12/01/2016 02:26:21 PM by Hibernate Tools 4.3.1

import com.fasterxml.jackson.annotation.JsonIgnore;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

/**
 * Usuario generated by hbm2java
 */
@Entity
@Table(name = "usuario", catalog = "naval"
)
public class Usuario implements java.io.Serializable {

    private String usuario;
    private Rol rol;
    private String nombre;
    private String apellido;
    private String password;
    private String estado;
    private Set<Solicitud> solicituds = new HashSet<Solicitud>(0);
    private Set<Notificacion> notificacions = new HashSet<Notificacion>(0);
    private Set<Notificacion> notificacions_1 = new HashSet<Notificacion>(0);
    private Set<Mantenimiento> mantenimientosForTrabajador = new HashSet<Mantenimiento>(0);
    private Set<ResponsableCurso> responsableCursos = new HashSet<ResponsableCurso>(0);
    private Set<Mantenimiento> mantenimientosForAprobadoPor = new HashSet<Mantenimiento>(0);

    public Usuario() {
    }

    public Usuario(String usuario, Rol rol) {
        this.usuario = usuario;
        this.rol = rol;
    }

    public Usuario(String usuario, Rol rol, String nombre, String apellido, String password, String estado, Set<Solicitud> solicituds, Set<Notificacion> notificacions, Set<Notificacion> notificacions_1, Set<Mantenimiento> mantenimientosForTrabajador, Set<ResponsableCurso> responsableCursos, Set<Mantenimiento> mantenimientosForAprobadoPor) {
        this.usuario = usuario;
        this.rol = rol;
        this.nombre = nombre;
        this.apellido = apellido;
        this.password = password;
        this.estado = estado;
        this.solicituds = solicituds;
        this.notificacions = notificacions;
        this.notificacions_1 = notificacions_1;
        this.mantenimientosForTrabajador = mantenimientosForTrabajador;
        this.responsableCursos = responsableCursos;
        this.mantenimientosForAprobadoPor = mantenimientosForAprobadoPor;
    }

    @Id
    @Column(name = "usuario", unique = true, nullable = false)
    public String getUsuario() {
        return this.usuario;
    }

    public void setUsuario(String usuario) {
        this.usuario = usuario;
    }

    @JsonIgnore
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "rol_codigo", nullable = false)
    public Rol getRol() {
        return this.rol;
    }

    public void setRol(Rol rol) {
        this.rol = rol;
    }

    @Column(name = "nombre")
    public String getNombre() {
        return this.nombre;
    }

    public void setNombre(String nombre) {
        this.nombre = nombre;
    }

    @Column(name = "apellido")
    public String getApellido() {
        return this.apellido;
    }

    public void setApellido(String apellido) {
        this.apellido = apellido;
    }

    @Column(name = "password", length = 45)
    public String getPassword() {
        return this.password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    @Column(name = "estado", length = 45)
    public String getEstado() {
        return this.estado;
    }

    public void setEstado(String estado) {
        this.estado = estado;
    }

    @JsonIgnore
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "usuario")
    public Set<Solicitud> getSolicituds() {
        return this.solicituds;
    }

    public void setSolicituds(Set<Solicitud> solicituds) {
        this.solicituds = solicituds;
    }

    @JsonIgnore
    @ManyToMany(fetch = FetchType.LAZY)
    @JoinTable(name = "notificacion_has_usuario", catalog = "naval", joinColumns = {
        @JoinColumn(name = "usuario_lector", nullable = false, updatable = false)}, inverseJoinColumns = {
        @JoinColumn(name = "notificacion_idnotificacion", nullable = false, updatable = false)})
    public Set<Notificacion> getNotificacions() {
        return this.notificacions;
    }

    public void setNotificacions(Set<Notificacion> notificacions) {
        this.notificacions = notificacions;
    }

    @JsonIgnore
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "usuario")
    public Set<Notificacion> getNotificacions_1() {
        return this.notificacions_1;
    }

    public void setNotificacions_1(Set<Notificacion> notificacions_1) {
        this.notificacions_1 = notificacions_1;
    }

    @JsonIgnore
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "usuarioByTrabajador")
    public Set<Mantenimiento> getMantenimientosForTrabajador() {
        return this.mantenimientosForTrabajador;
    }

    public void setMantenimientosForTrabajador(Set<Mantenimiento> mantenimientosForTrabajador) {
        this.mantenimientosForTrabajador = mantenimientosForTrabajador;
    }

    @JsonIgnore
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "usuario")
    public Set<ResponsableCurso> getResponsableCursos() {
        return this.responsableCursos;
    }

    public void setResponsableCursos(Set<ResponsableCurso> responsableCursos) {
        this.responsableCursos = responsableCursos;
    }

    @JsonIgnore
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "usuarioByAprobadoPor")
    public Set<Mantenimiento> getMantenimientosForAprobadoPor() {
        return this.mantenimientosForAprobadoPor;
    }

    public void setMantenimientosForAprobadoPor(Set<Mantenimiento> mantenimientosForAprobadoPor) {
        this.mantenimientosForAprobadoPor = mantenimientosForAprobadoPor;
    }

}
